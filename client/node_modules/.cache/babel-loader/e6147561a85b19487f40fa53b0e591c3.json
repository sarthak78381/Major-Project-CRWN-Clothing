{"ast":null,"code":"import { takeLatest, call, put } from 'redux-saga/effects';\nimport { shopActionTypes } from './shop.types';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\nimport { fetchCollectionFail, fetchCollectionSuccess } from './shop.action';\nexport function* fetchCollectionsStartAsync() {\n  try {\n    const collectionRef = firestore.collection(\"collections\");\n    const snapShot = yield collectionRef.get();\n    const newShopData = yield call(convertCollectionsSnapshotToMap, snapShot);\n    yield put(fetchCollectionSuccess(newShopData));\n  } catch (error) {\n    yield put(fetchCollectionFail());\n  }\n}\nexport function* fetchCollectionsStart() {\n  yield takeLatest(shopActionTypes.FETCH_COLLECTION_START, fetchCollectionsStartAsync);\n}","map":{"version":3,"sources":["D:/React Course/crwn-clothing/client/src/redux/shop/shop.saga.js"],"names":["takeLatest","call","put","shopActionTypes","firestore","convertCollectionsSnapshotToMap","fetchCollectionFail","fetchCollectionSuccess","fetchCollectionsStartAsync","collectionRef","collection","snapShot","get","newShopData","error","fetchCollectionsStart","FETCH_COLLECTION_START"],"mappings":"AAAA,SAAQA,UAAR,EAAoBC,IAApB,EAA0BC,GAA1B,QAAoC,oBAApC;AACA,SAAQC,eAAR,QAA8B,cAA9B;AACA,SAAQC,SAAR,EAAmBC,+BAAnB,QAAyD,+BAAzD;AACA,SAAQC,mBAAR,EAA6BC,sBAA7B,QAA0D,eAA1D;AAEA,OAAO,UAAUC,0BAAV,GAAuC;AAC1C,MAAI;AACA,UAAMC,aAAa,GAAGL,SAAS,CAACM,UAAV,CAAqB,aAArB,CAAtB;AACA,UAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB;AACA,UAAMC,WAAW,GAAG,MAAMZ,IAAI,CAACI,+BAAD,EAAkCM,QAAlC,CAA9B;AACA,UAAMT,GAAG,CAACK,sBAAsB,CAACM,WAAD,CAAvB,CAAT;AACH,GALD,CAKE,OAAMC,KAAN,EAAa;AACX,UAAMZ,GAAG,CAACI,mBAAmB,EAApB,CAAT;AACH;AAEJ;AAED,OAAO,UAAUS,qBAAV,GAAkC;AACrC,QAAMf,UAAU,CAACG,eAAe,CAACa,sBAAjB,EAAwCR,0BAAxC,CAAhB;AACH","sourcesContent":["import {takeLatest, call, put} from 'redux-saga/effects';\r\nimport {shopActionTypes} from './shop.types';\r\nimport {firestore, convertCollectionsSnapshotToMap} from '../../firebase/firebase.utils';\r\nimport {fetchCollectionFail, fetchCollectionSuccess} from './shop.action';\r\n\r\nexport function* fetchCollectionsStartAsync() {\r\n    try {\r\n        const collectionRef = firestore.collection(\"collections\");\r\n        const snapShot = yield collectionRef.get();\r\n        const newShopData = yield call(convertCollectionsSnapshotToMap, snapShot);\r\n        yield put(fetchCollectionSuccess(newShopData));\r\n    } catch(error) {\r\n        yield put(fetchCollectionFail())\r\n    }\r\n    \r\n}\r\n\r\nexport function* fetchCollectionsStart() {\r\n    yield takeLatest(shopActionTypes.FETCH_COLLECTION_START,fetchCollectionsStartAsync)\r\n}"]},"metadata":{},"sourceType":"module"}