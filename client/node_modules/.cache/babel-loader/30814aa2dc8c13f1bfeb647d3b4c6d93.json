{"ast":null,"code":"import { takeEvery } from 'redux-saga/effects';\nimport { shopActionTypes } from './shop.types';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\nexport function* fetchCollectionsStartAsync() {\n  const collectionRef = firestore.collection(\"collections\");\n  dispatch(fetchCollectionsStart());\n  collectionRef.get().then(snapshot => {\n    const newShopData = convertCollectionsSnapshotToMap(snapshot);\n    dispatch(fetchCollectionSuccess(newShopData));\n  }).catch(error => dispatch(fetchCollectionFail(error.message)));\n}\nexport function* fetchCollectionsStart() {\n  yield takeEvery(shopActionTypes.FETCH_COLLECTION_START, fetchCollectionsStartAsync);\n}","map":{"version":3,"sources":["D:/React Course/crwn-clothing/src/redux/shop/shop.saga.js"],"names":["takeEvery","shopActionTypes","firestore","convertCollectionsSnapshotToMap","fetchCollectionsStartAsync","collectionRef","collection","dispatch","fetchCollectionsStart","get","then","snapshot","newShopData","fetchCollectionSuccess","catch","error","fetchCollectionFail","message","FETCH_COLLECTION_START"],"mappings":"AAAA,SAAQA,SAAR,QAAwB,oBAAxB;AACA,SAAQC,eAAR,QAA8B,cAA9B;AACA,SAAQC,SAAR,EAAmBC,+BAAnB,QAAyD,+BAAzD;AAEA,OAAO,UAAUC,0BAAV,GAAuC;AAC1C,QAAMC,aAAa,GAAGH,SAAS,CAACI,UAAV,CAAqB,aAArB,CAAtB;AACAC,EAAAA,QAAQ,CAACC,qBAAqB,EAAtB,CAAR;AACAH,EAAAA,aAAa,CAACI,GAAd,GAAoBC,IAApB,CAAyBC,QAAQ,IAAI;AACjC,UAAMC,WAAW,GAAGT,+BAA+B,CAACQ,QAAD,CAAnD;AACAJ,IAAAA,QAAQ,CAACM,sBAAsB,CAACD,WAAD,CAAvB,CAAR;AACH,GAHD,EAGGE,KAHH,CAGSC,KAAK,IAAIR,QAAQ,CAACS,mBAAmB,CAACD,KAAK,CAACE,OAAP,CAApB,CAH1B;AAIH;AAED,OAAO,UAAUT,qBAAV,GAAkC;AACrC,QAAMR,SAAS,CAACC,eAAe,CAACiB,sBAAjB,EAAwCd,0BAAxC,CAAf;AACH","sourcesContent":["import {takeEvery} from 'redux-saga/effects';\r\nimport {shopActionTypes} from './shop.types';\r\nimport {firestore, convertCollectionsSnapshotToMap} from '../../firebase/firebase.utils';\r\n\r\nexport function* fetchCollectionsStartAsync() {\r\n    const collectionRef = firestore.collection(\"collections\");\r\n    dispatch(fetchCollectionsStart())\r\n    collectionRef.get().then(snapshot => {\r\n        const newShopData = convertCollectionsSnapshotToMap(snapshot);\r\n        dispatch(fetchCollectionSuccess(newShopData))\r\n    }).catch(error => dispatch(fetchCollectionFail(error.message)))\r\n}\r\n\r\nexport function* fetchCollectionsStart() {\r\n    yield takeEvery(shopActionTypes.FETCH_COLLECTION_START,fetchCollectionsStartAsync)\r\n}"]},"metadata":{},"sourceType":"module"}