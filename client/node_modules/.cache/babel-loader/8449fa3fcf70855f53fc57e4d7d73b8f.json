{"ast":null,"code":"import cartActionTypes from './cart.types';\nconst INITIAL_STATE = {\n  hidden: true,\n  cartItems: []\n};\n\nfunction addSameCartItem(cartItems, item) {\n  return cartItems.map(cartItem => cartItem.id === item.id ? { ...cartItem,\n    quantity: cartItem.quantity + 1\n  } : cartItem);\n}\n\nfunction subSameCartItem(cartItems, item) {\n  if (item.quantity === 1) {\n    cartItems.splice(cartItems.indexOf(item), 1);\n    console.log(cartItems);\n  }\n\n  return cartItems.map(cartItem => cartItem.id === item.id ? { ...cartItem,\n    quantity: cartItem.quantity - 1\n  } : cartItem);\n}\n\nfunction AddItems(cartItems, item) {\n  const existingCartItem = cartItems.find(cartItem => cartItem.id === item.id);\n\n  if (existingCartItem) {\n    return addSameCartItem(cartItems, item);\n  }\n\n  return [...cartItems, { ...item\n  }];\n}\n\nconst cartReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case cartActionTypes.TOGGLE_CART_HIDDEN:\n      return { ...state,\n        hidden: !state.hidden\n      };\n\n    case cartActionTypes.ADD_ITEMS:\n      return { ...state,\n        cartItems: AddItems(state.cartItems, action.payload)\n      };\n\n    case cartActionTypes.INCREASE_QUANTITY:\n      return { ...state,\n        cartItems: addSameCartItem(state.cartItems, action.payload)\n      };\n\n    case cartActionTypes.DECREASE_QUANTITY:\n      return { ...state,\n        cartItems: subSameCartItem(state.cartItems, action.payload)\n      };\n\n    case cartActionTypes.REMOVE_ITEM:\n      return { ...state,\n        cart\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default cartReducer;","map":{"version":3,"sources":["D:/React Course/crwn-clothing/src/redux/cart/cart.reducer.js"],"names":["cartActionTypes","INITIAL_STATE","hidden","cartItems","addSameCartItem","item","map","cartItem","id","quantity","subSameCartItem","splice","indexOf","console","log","AddItems","existingCartItem","find","cartReducer","state","action","type","TOGGLE_CART_HIDDEN","ADD_ITEMS","payload","INCREASE_QUANTITY","DECREASE_QUANTITY","REMOVE_ITEM","cart"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,cAA5B;AAEA,MAAMC,aAAa,GAAG;AAClBC,EAAAA,MAAM,EAAE,IADU;AAElBC,EAAAA,SAAS,EAAE;AAFO,CAAtB;;AAKA,SAASC,eAAT,CAAyBD,SAAzB,EAAoCE,IAApC,EAA0C;AACtC,SAAOF,SAAS,CAACG,GAAV,CAAcC,QAAQ,IAAIA,QAAQ,CAACC,EAAT,KAAgBH,IAAI,CAACG,EAArB,GAA0B,EAAC,GAAGD,QAAJ;AAAcE,IAAAA,QAAQ,EAAEF,QAAQ,CAACE,QAAT,GAAoB;AAA5C,GAA1B,GAA2EF,QAArG,CAAP;AACH;;AACD,SAASG,eAAT,CAAyBP,SAAzB,EAAoCE,IAApC,EAA0C;AAEtC,MAAGA,IAAI,CAACI,QAAL,KAAkB,CAArB,EAAwB;AACpBN,IAAAA,SAAS,CAACQ,MAAV,CAAiBR,SAAS,CAACS,OAAV,CAAkBP,IAAlB,CAAjB,EAAyC,CAAzC;AACAQ,IAAAA,OAAO,CAACC,GAAR,CAAYX,SAAZ;AACH;;AAED,SAAOA,SAAS,CAACG,GAAV,CAAcC,QAAQ,IAAIA,QAAQ,CAACC,EAAT,KAAgBH,IAAI,CAACG,EAArB,GAA0B,EAAC,GAAGD,QAAJ;AAAcE,IAAAA,QAAQ,EAAEF,QAAQ,CAACE,QAAT,GAAoB;AAA5C,GAA1B,GAA2EF,QAArG,CAAP;AACH;;AAED,SAASQ,QAAT,CAAkBZ,SAAlB,EAA6BE,IAA7B,EAAmC;AAC/B,QAAMW,gBAAgB,GAAGb,SAAS,CAACc,IAAV,CAAeV,QAAQ,IAAIA,QAAQ,CAACC,EAAT,KAAgBH,IAAI,CAACG,EAAhD,CAAzB;;AAEA,MAAIQ,gBAAJ,EAAsB;AAClB,WAAOZ,eAAe,CAACD,SAAD,EAAYE,IAAZ,CAAtB;AACH;;AAED,SAAO,CAAC,GAAGF,SAAJ,EAAe,EAAC,GAAGE;AAAJ,GAAf,CAAP;AACH;;AAED,MAAMa,WAAW,GAAG,CAACC,KAAK,GAAGlB,aAAT,EAAwBmB,MAAxB,KAAmC;AACnD,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKrB,eAAe,CAACsB,kBAArB;AACI,aAAO,EACH,GAAGH,KADA;AAEHjB,QAAAA,MAAM,EAAE,CAACiB,KAAK,CAACjB;AAFZ,OAAP;;AAIJ,SAAKF,eAAe,CAACuB,SAArB;AACI,aAAO,EACH,GAAGJ,KADA;AAEHhB,QAAAA,SAAS,EAAEY,QAAQ,CAACI,KAAK,CAAChB,SAAP,EAAkBiB,MAAM,CAACI,OAAzB;AAFhB,OAAP;;AAIJ,SAAKxB,eAAe,CAACyB,iBAArB;AACI,aAAO,EACH,GAAGN,KADA;AAEHhB,QAAAA,SAAS,EAAEC,eAAe,CAACe,KAAK,CAAChB,SAAP,EAAkBiB,MAAM,CAACI,OAAzB;AAFvB,OAAP;;AAIJ,SAAKxB,eAAe,CAAC0B,iBAArB;AACI,aAAO,EACH,GAAGP,KADA;AAEHhB,QAAAA,SAAS,EAAEO,eAAe,CAACS,KAAK,CAAChB,SAAP,EAAkBiB,MAAM,CAACI,OAAzB;AAFvB,OAAP;;AAIJ,SAAKxB,eAAe,CAAC2B,WAArB;AACI,aAAM,EACF,GAAGR,KADD;AAEFS,QAAAA;AAFE,OAAN;;AAKJ;AACI,aAAOT,KAAP;AA5BR;AA8BH,CA/BD;;AAiCA,eAAeD,WAAf","sourcesContent":["import cartActionTypes from './cart.types';\r\n\r\nconst INITIAL_STATE = {\r\n    hidden: true,\r\n    cartItems: []\r\n}\r\n\r\nfunction addSameCartItem(cartItems, item) {\r\n    return cartItems.map(cartItem => cartItem.id === item.id ? {...cartItem, quantity: cartItem.quantity + 1} : cartItem)\r\n}\r\nfunction subSameCartItem(cartItems, item) {\r\n\r\n    if(item.quantity === 1) {\r\n        cartItems.splice(cartItems.indexOf(item),1);\r\n        console.log(cartItems)\r\n    }\r\n\r\n    return cartItems.map(cartItem => cartItem.id === item.id ? {...cartItem, quantity: cartItem.quantity - 1} : cartItem)\r\n}\r\n\r\nfunction AddItems(cartItems, item) {\r\n    const existingCartItem = cartItems.find(cartItem => cartItem.id === item.id);\r\n\r\n    if (existingCartItem) {\r\n        return addSameCartItem(cartItems, item);\r\n    }\r\n\r\n    return [...cartItems, {...item}]\r\n}\r\n\r\nconst cartReducer = (state = INITIAL_STATE, action) => {\r\n    switch(action.type) {\r\n        case cartActionTypes.TOGGLE_CART_HIDDEN:\r\n            return {\r\n                ...state,\r\n                hidden: !state.hidden,\r\n            }\r\n        case cartActionTypes.ADD_ITEMS:\r\n            return {\r\n                ...state,\r\n                cartItems: AddItems(state.cartItems, action.payload)\r\n            }\r\n        case cartActionTypes.INCREASE_QUANTITY:\r\n            return {\r\n                ...state,\r\n                cartItems: addSameCartItem(state.cartItems, action.payload)\r\n            }\r\n        case cartActionTypes.DECREASE_QUANTITY:\r\n            return {\r\n                ...state,\r\n                cartItems: subSameCartItem(state.cartItems, action.payload)\r\n            }\r\n        case cartActionTypes.REMOVE_ITEM:\r\n            return{\r\n                ...state,\r\n                cart\r\n            }\r\n            \r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default cartReducer;\r\n"]},"metadata":{},"sourceType":"module"}