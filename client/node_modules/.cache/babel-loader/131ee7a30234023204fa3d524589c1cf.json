{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport userActionTypes from './user.types';\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\nimport { signInFail, signInSuccess, signOutFail, signOutSuccess, signUpSuccess, signUpFail } from './user-action';\nexport function* signInAsync(userAuth, additionalData) {\n  user;\n\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFail(error.message));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield signInAsync(user);\n  } catch (error) {\n    yield put(signInFail(error.message));\n  }\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield signInAsync(user);\n  } catch (error) {\n    yield put(signInFail(error.message));\n  }\n}\nexport function* isUserAuthenticated() {\n  try {\n    const user = yield getCurrentUser();\n    if (!user) return;\n    yield signInAsync(user);\n  } catch (error) {\n    yield put(signInFail(error.message));\n  }\n}\nexport function* signOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFail());\n  }\n}\nexport function* signUp({\n  payload: {\n    email,\n    displayName,\n    password,\n    confirmPassword\n  }\n}) {\n  try {\n    if (password !== confirmPassword) {\n      alert('passwords does not match!');\n      return;\n    }\n\n    const {\n      user\n    } = yield auth.createUserWithEmailAndPassword(email, password);\n    yield signInAsync(user);\n  } catch (error) {\n    yield put(signUpFail(error.message));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(userActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(userActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(userActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* onSignOutStart() {\n  yield takeLatest(userActionTypes.SIGN_OUT_START, signOut);\n}\nexport function* onSignUpStart() {\n  yield takeLatest(userActionTypes.SIGN_UP_START, signUp);\n}\nexport function* userSaga() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession), call(onSignOutStart), call(onSignUpStart)]);\n}","map":{"version":3,"sources":["D:/React Course/crwn-clothing/src/redux/user/user.saga.js"],"names":["takeLatest","put","all","call","userActionTypes","auth","googleProvider","createUserProfileDocument","getCurrentUser","signInFail","signInSuccess","signOutFail","signOutSuccess","signUpSuccess","signUpFail","signInAsync","userAuth","additionalData","user","userRef","userSnapshot","get","id","data","error","message","signInWithGoogle","signInWithPopup","signInWithEmail","payload","email","password","signInWithEmailAndPassword","isUserAuthenticated","signOut","signUp","displayName","confirmPassword","alert","createUserWithEmailAndPassword","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","onCheckUserSession","CHECK_USER_SESSION","onSignOutStart","SIGN_OUT_START","onSignUpStart","SIGN_UP_START","userSaga"],"mappings":"AAAA,SAAQA,UAAR,EAAoBC,GAApB,EAAyBC,GAAzB,EAA8BC,IAA9B,QAAyC,oBAAzC;AACA,OAAOC,eAAP,MAA4B,cAA5B;AACA,SAAQC,IAAR,EAAcC,cAAd,EAA8BC,yBAA9B,EAAyDC,cAAzD,QAA+E,+BAA/E;AACA,SAAQC,UAAR,EAAoBC,aAApB,EAAmCC,WAAnC,EAAgDC,cAAhD,EAAgEC,aAAhE,EAA+EC,UAA/E,QAAgG,eAAhG;AAEA,OAAO,UAAUC,WAAV,CAAsBC,QAAtB,EAAgCC,cAAhC,EAAgD;AACnDC,EAAAA,IAAI;;AACJ,MAAG;AACC,UAAMC,OAAO,GAAG,MAAMhB,IAAI,CAACI,yBAAD,EAA4BS,QAA5B,CAA1B;AACA,UAAMI,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AACA,UAAMpB,GAAG,CAACS,aAAa,CAAC;AACpBY,MAAAA,EAAE,EAAEF,YAAY,CAACE,EADG;AAEpB,SAAGF,YAAY,CAACG,IAAb;AAFiB,KAAD,CAAd,CAAT;AAIH,GAPD,CAOC,OAAMC,KAAN,EAAa;AACV,UAAMvB,GAAG,CAACQ,UAAU,CAACe,KAAK,CAACC,OAAP,CAAX,CAAT;AACH;AACJ;AAED,OAAO,UAAUC,gBAAV,GAA6B;AAChC,MAAG;AACC,UAAM;AAACR,MAAAA;AAAD,QAAS,MAAMb,IAAI,CAACsB,eAAL,CAAqBrB,cAArB,CAArB;AACA,UAAMS,WAAW,CAACG,IAAD,CAAjB;AACH,GAHD,CAGE,OAAOM,KAAP,EAAc;AACZ,UAAMvB,GAAG,CAACQ,UAAU,CAACe,KAAK,CAACC,OAAP,CAAX,CAAT;AACH;AACJ;AACD,OAAO,UAAUG,eAAV,CAA0B;AAACC,EAAAA,OAAO,EAAE;AAACC,IAAAA,KAAD;AAAQC,IAAAA;AAAR;AAAV,CAA1B,EAAwD;AAC3D,MAAG;AACA,UAAM;AAACb,MAAAA;AAAD,QAAS,MAAMb,IAAI,CAAC2B,0BAAL,CAAgCF,KAAhC,EAAuCC,QAAvC,CAArB;AACA,UAAMhB,WAAW,CAACG,IAAD,CAAjB;AACF,GAHD,CAGE,OAAOM,KAAP,EAAc;AACZ,UAAMvB,GAAG,CAACQ,UAAU,CAACe,KAAK,CAACC,OAAP,CAAX,CAAT;AACH;AACJ;AACD,OAAO,UAAUQ,mBAAV,GAAgC;AACnC,MAAG;AACC,UAAMf,IAAI,GAAG,MAAMV,cAAc,EAAjC;AACA,QAAG,CAACU,IAAJ,EAAU;AACV,UAAMH,WAAW,CAACG,IAAD,CAAjB;AACH,GAJD,CAIC,OAAMM,KAAN,EAAa;AACV,UAAMvB,GAAG,CAACQ,UAAU,CAACe,KAAK,CAACC,OAAP,CAAX,CAAT;AACH;AACJ;AACD,OAAO,UAAUS,OAAV,GAAoB;AACvB,MAAG;AACC,UAAM7B,IAAI,CAAC6B,OAAL,EAAN;AACA,UAAMjC,GAAG,CAACW,cAAc,EAAf,CAAT;AACH,GAHD,CAGC,OAAMY,KAAN,EAAa;AACV,UAAMvB,GAAG,CAACU,WAAW,EAAZ,CAAT;AACH;AACJ;AACD,OAAO,UAAUwB,MAAV,CAAiB;AAACN,EAAAA,OAAO,EAAE;AAACC,IAAAA,KAAD;AAAOM,IAAAA,WAAP;AAAmBL,IAAAA,QAAnB;AAA4BM,IAAAA;AAA5B;AAAV,CAAjB,EAA0E;AAC7E,MAAG;AACC,QAAGN,QAAQ,KAAKM,eAAhB,EAAgC;AAC5BC,MAAAA,KAAK,CAAC,2BAAD,CAAL;AACA;AACH;;AACD,UAAM;AAACpB,MAAAA;AAAD,QAAS,MAAMb,IAAI,CAACkC,8BAAL,CAAoCT,KAApC,EAA2CC,QAA3C,CAArB;AACA,UAAMhB,WAAW,CAACG,IAAD,CAAjB;AACH,GAPD,CAOC,OAAMM,KAAN,EAAa;AACV,UAAMvB,GAAG,CAACa,UAAU,CAACU,KAAK,CAACC,OAAP,CAAX,CAAT;AACH;AACJ;AAED,OAAO,UAAUe,mBAAV,GAAgC;AACnC,QAAMxC,UAAU,CAACI,eAAe,CAACqC,oBAAjB,EAAuCf,gBAAvC,CAAhB;AACH;AACD,OAAO,UAAUgB,kBAAV,GAA+B;AAClC,QAAM1C,UAAU,CAACI,eAAe,CAACuC,mBAAjB,EAAsCf,eAAtC,CAAhB;AACH;AACD,OAAO,UAAUgB,kBAAV,GAA+B;AAClC,QAAM5C,UAAU,CAACI,eAAe,CAACyC,kBAAjB,EAAqCZ,mBAArC,CAAhB;AACH;AACD,OAAO,UAAUa,cAAV,GAA2B;AAC9B,QAAM9C,UAAU,CAACI,eAAe,CAAC2C,cAAjB,EAAiCb,OAAjC,CAAhB;AACH;AACD,OAAO,UAAUc,aAAV,GAA0B;AAC7B,QAAMhD,UAAU,CAACI,eAAe,CAAC6C,aAAjB,EAAgCd,MAAhC,CAAhB;AACH;AAED,OAAO,UAAUe,QAAV,GAAqB;AACxB,QAAMhD,GAAG,CAAC,CAACC,IAAI,CAACqC,mBAAD,CAAL,EAA4BrC,IAAI,CAACuC,kBAAD,CAAhC,EAAsDvC,IAAI,CAACyC,kBAAD,CAA1D,EAAgFzC,IAAI,CAAC2C,cAAD,CAApF,EAAsG3C,IAAI,CAAC6C,aAAD,CAA1G,CAAD,CAAT;AACH","sourcesContent":["import {takeLatest, put, all, call} from 'redux-saga/effects';\r\nimport userActionTypes from './user.types';\r\nimport {auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\r\nimport {signInFail, signInSuccess, signOutFail, signOutSuccess, signUpSuccess, signUpFail} from './user-action';\r\n\r\nexport function* signInAsync(userAuth, additionalData) {\r\n    user\r\n    try{\r\n        const userRef = yield call(createUserProfileDocument, userAuth);\r\n        const userSnapshot = yield userRef.get();\r\n        yield put(signInSuccess({\r\n            id: userSnapshot.id,\r\n            ...userSnapshot.data()\r\n        }))\r\n    }catch(error) {\r\n        yield put(signInFail(error.message));\r\n    }\r\n}\r\n\r\nexport function* signInWithGoogle() {\r\n    try{\r\n        const {user} = yield auth.signInWithPopup(googleProvider);\r\n        yield signInAsync(user);\r\n    } catch (error) {\r\n        yield put(signInFail(error.message));\r\n    }\r\n}\r\nexport function* signInWithEmail({payload: {email, password}}) {\r\n    try{\r\n       const {user} = yield auth.signInWithEmailAndPassword(email, password);\r\n       yield signInAsync(user);\r\n    } catch (error) {\r\n        yield put(signInFail(error.message));\r\n    }\r\n}\r\nexport function* isUserAuthenticated() {\r\n    try{\r\n        const user = yield getCurrentUser();\r\n        if(!user) return;\r\n        yield signInAsync(user);\r\n    }catch(error) {\r\n        yield put(signInFail(error.message));\r\n    }\r\n}\r\nexport function* signOut() {\r\n    try{\r\n        yield auth.signOut();\r\n        yield put(signOutSuccess())\r\n    }catch(error) {\r\n        yield put(signOutFail())\r\n    }\r\n}\r\nexport function* signUp({payload: {email,displayName,password,confirmPassword}}) {\r\n    try{\r\n        if(password !== confirmPassword){\r\n            alert('passwords does not match!');\r\n            return;\r\n        }\r\n        const {user} = yield auth.createUserWithEmailAndPassword(email, password);\r\n        yield signInAsync(user)\r\n    }catch(error) {\r\n        yield put(signUpFail(error.message));\r\n    }\r\n}\r\n\r\nexport function* onGoogleSignInStart() {\r\n    yield takeLatest(userActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle)\r\n}\r\nexport function* onEmailSignInStart() {\r\n    yield takeLatest(userActionTypes.EMAIL_SIGN_IN_START, signInWithEmail)\r\n}\r\nexport function* onCheckUserSession() {\r\n    yield takeLatest(userActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\r\n}\r\nexport function* onSignOutStart() {\r\n    yield takeLatest(userActionTypes.SIGN_OUT_START, signOut);\r\n}\r\nexport function* onSignUpStart() {\r\n    yield takeLatest(userActionTypes.SIGN_UP_START, signUp);\r\n}\r\n\r\nexport function* userSaga() {\r\n    yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession), call(onSignOutStart), call(onSignUpStart)])\r\n}"]},"metadata":{},"sourceType":"module"}