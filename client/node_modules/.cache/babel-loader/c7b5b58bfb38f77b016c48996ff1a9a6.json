{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport userActionTypes from './user.types';\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\nimport { signInFail, signInSuccess, signOutFail, signOutSuccess } from './user-action';\nexport function* signInAsync(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFail(error.message));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield signInAsync(user);\n  } catch (error) {\n    yield put(signInFail(error.message));\n  }\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield signInAsync(user);\n  } catch (error) {\n    yield put(signInFail(error.message));\n  }\n}\nexport function* isUserAuthenticated() {\n  try {\n    const user = yield getCurrentUser();\n    if (!user) return;\n    yield signInAsync(user);\n  } catch (error) {\n    yield put(signInFail(error.message));\n  }\n}\nexport function* signOut() {\n  try {} catch (error) {\n    yield put(signOutFail());\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(userActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(userActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(userActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* onSignOutStart() {\n  yield takeLatest(userActionTypes.SIGN_OUT_START, signOut);\n}\nexport function* userSaga() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession), call(onSignOutStart)]);\n}","map":{"version":3,"sources":["D:/React Course/crwn-clothing/src/redux/user/user.saga.js"],"names":["takeLatest","put","all","call","userActionTypes","auth","googleProvider","createUserProfileDocument","getCurrentUser","signInFail","signInSuccess","signOutFail","signOutSuccess","signInAsync","userAuth","userRef","userSnapshot","get","id","data","error","message","signInWithGoogle","user","signInWithPopup","signInWithEmail","payload","email","password","signInWithEmailAndPassword","isUserAuthenticated","signOut","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","onCheckUserSession","CHECK_USER_SESSION","onSignOutStart","SIGN_OUT_START","userSaga"],"mappings":"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","sourcesContent":["import {takeLatest, put, all, call} from 'redux-saga/effects';\r\nimport userActionTypes from './user.types';\r\nimport {auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\r\nimport {signInFail, signInSuccess, signOutFail, signOutSuccess} from './user-action';\r\n\r\nexport function* signInAsync(userAuth) {\r\n    try{\r\n        const userRef = yield call(createUserProfileDocument, userAuth);\r\n        const userSnapshot = yield userRef.get();\r\n        yield put(signInSuccess({\r\n            id: userSnapshot.id,\r\n            ...userSnapshot.data()\r\n        }))\r\n    }catch(error) {\r\n        yield put(signInFail(error.message));\r\n    }\r\n}\r\n\r\nexport function* signInWithGoogle() {\r\n    try{\r\n        const {user} = yield auth.signInWithPopup(googleProvider);\r\n        yield signInAsync(user);\r\n    } catch (error) {\r\n        yield put(signInFail(error.message));\r\n    }\r\n}\r\nexport function* signInWithEmail({payload: {email, password}}) {\r\n    try{\r\n       const {user} = yield auth.signInWithEmailAndPassword(email, password);\r\n       yield signInAsync(user);\r\n    } catch (error) {\r\n        yield put(signInFail(error.message));\r\n    }\r\n}\r\nexport function* isUserAuthenticated() {\r\n    try{\r\n        const user = yield getCurrentUser();\r\n        if(!user) return;\r\n        yield signInAsync(user);\r\n    }catch(error) {\r\n        yield put(signInFail(error.message));\r\n    }\r\n}\r\nexport function* signOut() {\r\n    try{\r\n\r\n    }catch(error) {\r\n        yield put(signOutFail())\r\n    }\r\n}\r\n\r\nexport function* onGoogleSignInStart() {\r\n    yield takeLatest(userActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle)\r\n}\r\nexport function* onEmailSignInStart() {\r\n    yield takeLatest(userActionTypes.EMAIL_SIGN_IN_START, signInWithEmail)\r\n}\r\nexport function* onCheckUserSession() {\r\n    yield takeLatest(userActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\r\n}\r\nexport function* onSignOutStart() {\r\n    yield takeLatest(userActionTypes.SIGN_OUT_START, signOut);\r\n}\r\n\r\nexport function* userSaga() {\r\n    yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession), call(onSignOutStart)])\r\n}"]},"metadata":{},"sourceType":"module"}